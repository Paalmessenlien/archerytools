# Production ArrowTuner API Backend with Gunicorn WSGI Server
FROM python:3.9-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV FLASK_APP=api.py
ENV FLASK_ENV=production

# Set work directory
WORKDIR /app

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        curl \
        sqlite3 \
        build-essential \
        jq \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt gunicorn

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p /app/data/processed /app/data/raw /app/logs /app/user_data /app/arrow_data /app/backups

# Create production startup script
RUN cat > /app/start-production.sh << 'EOF' && \
    chmod +x /app/start-production.sh
#!/bin/bash
echo "🚀 Starting ArrowTuner API with Gunicorn (Production WSGI Server)..."
echo "=================================================="

# Check if we need to run database verification
if [ -f "/app/verify-databases.py" ]; then
    echo "🔍 Running database verification..."
    python3 /app/verify-databases.py || echo "⚠️  Database verification completed with warnings"
fi

# Database schema update for production
echo "🔧 Ensuring database schema is up to date..."
python3 -c "
import sqlite3
import os

# Get database path with fallback
db_path = os.environ.get('ARROW_DATABASE_PATH', '/app/arrow_database.db')
if not os.path.exists(db_path):
    db_path = '/app/arrow_data/arrow_database.db'

if os.path.exists(db_path):
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Add missing columns if they don't exist
        missing_columns = [
            ('arrow_type', 'TEXT'),
            ('carbon_content', 'TEXT'),
            ('straightness_tolerance', 'TEXT'),
            ('weight_tolerance', 'TEXT'),
            ('source_url', 'TEXT'),
            ('scraped_at', 'TEXT')
        ]
        
        for column_name, column_type in missing_columns:
            try:
                cursor.execute(f'ALTER TABLE arrows ADD COLUMN {column_name} {column_type}')
                print(f'✅ Added {column_name} column')
            except sqlite3.OperationalError:
                pass  # Column already exists
        
        # Create indexes
        indexes = [
            'CREATE INDEX IF NOT EXISTS idx_arrows_arrow_type ON arrows(arrow_type)',
            'CREATE INDEX IF NOT EXISTS idx_arrows_material ON arrows(material)',
            'CREATE INDEX IF NOT EXISTS idx_arrows_manufacturer ON arrows(manufacturer)',
            'CREATE INDEX IF NOT EXISTS idx_arrows_model ON arrows(model_name)'
        ]
        
        for index_sql in indexes:
            try:
                cursor.execute(index_sql)
            except sqlite3.OperationalError:
                pass  # Index already exists
        
        conn.commit()
        conn.close()
        print('✅ Database schema verified and updated')
    except Exception as e:
        print(f'⚠️  Database schema update warning: {e}')
else:
    print('⚠️  Arrow database not found, will be created on first API call')
"

echo "🌐 All checks passed, starting Gunicorn production server..."
echo "📊 Arrow database: $(python3 -c "import os; print(os.environ.get('ARROW_DATABASE_PATH', '/app/arrow_database.db'))")"
echo "👤 User database: $(python3 -c "import os; print(os.environ.get('USER_DATABASE_PATH', '/app/user_data/user_data.db'))")"
echo "🔧 Environment: production"
echo ""

# Start Gunicorn with production configuration
exec gunicorn \
    --bind 0.0.0.0:5000 \
    --workers 4 \
    --worker-class sync \
    --timeout 120 \
    --keep-alive 5 \
    --max-requests 1000 \
    --max-requests-jitter 100 \
    --preload \
    --access-logfile - \
    --error-logfile - \
    --log-level info \
    api:app
EOF

# Make scripts executable
RUN chmod +x /app/api.py \
    /app/start-production.sh && \
    chmod +x /app/build-database.py || true && \
    chmod +x /app/start-api.sh || true && \
    chmod +x /app/start-api-robust.sh || true && \
    chmod +x /app/verify-databases.py || true

# Create non-root user with specific UID/GID
RUN addgroup --gid 1000 appgroup && \
    adduser --disabled-password --gecos '' --uid 1000 --gid 1000 appuser

# Set up directory structure and permissions
RUN chown -R appuser:appgroup /app && \
    chmod 755 /app/logs /app/user_data /app/data /app/arrow_data /app/backups

# Switch to non-root user
USER appuser

# Production health check with extended startup period
HEALTHCHECK --interval=30s --timeout=15s --start-period=120s --retries=5 \
    CMD curl -f http://localhost:5000/api/simple-health || curl -f http://localhost:5000/api/health || exit 1

# Expose port
EXPOSE 5000

# Use production startup script
CMD ["./start-production.sh"]