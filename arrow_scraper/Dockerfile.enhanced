# Enhanced ArrowTuner API Backend Dockerfile with comprehensive verification
FROM python:3.9-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV FLASK_APP=api.py
ENV FLASK_ENV=production

# Set work directory
WORKDIR /app

# Install system dependencies including verification tools
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        curl \
        wget \
        build-essential \
        sqlite3 \
        jq \
        tree \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p /app/data/processed /app/data/raw /app/logs /app/user_data

# Make scripts executable
RUN chmod +x /app/api.py \
    /app/build-database.py \
    /app/start-api.sh \
    /app/start-api-robust.sh \
    /app/verify-databases.py

# Create non-root user with specific UID/GID
RUN addgroup --gid 1000 appgroup && \
    adduser --disabled-password --gecos '' --uid 1000 --gid 1000 appuser

# Build and verify arrow database as root
RUN echo "üî® Building arrow database..." && \
    python3 build-database-robust.py && \
    echo "‚úÖ Database build completed" && \
    \
    echo "üîç Verifying database content..." && \
    python3 -c "import sqlite3; conn = sqlite3.connect('arrow_database.db'); cursor = conn.cursor(); cursor.execute('SELECT COUNT(*) FROM arrows'); arrow_count = cursor.fetchone()[0]; cursor.execute('SELECT COUNT(*) FROM spine_specifications'); spine_count = cursor.fetchone()[0]; cursor.execute('SELECT COUNT(DISTINCT manufacturer) FROM arrows'); mfg_count = cursor.fetchone()[0]; print(f'Database verification:'); print(f'  Arrows: {arrow_count}'); print(f'  Spine specs: {spine_count}'); print(f'  Manufacturers: {mfg_count}'); exit(1) if arrow_count < 50 or spine_count < 100 else print('‚úÖ Database verification passed'); conn.close()" && \
    \
    echo "üíæ Creating database backup..." && \
    cp arrow_database.db /app/arrow_database_backup.db && \
    \
    echo "üîß Setting permissions..." && \
    chown -R appuser:appgroup /app && \
    chmod 664 /app/arrow*.db && \
    chmod 755 /app/logs /app/user_data && \
    \
    echo "‚úÖ Enhanced build completed successfully"

# Verify build integrity
RUN echo "üîç Final build verification..." && \
    ls -la /app/arrow*.db && \
    python3 -c "import sys; import os; sys.path.append('/app'); exec('try:\\n    from user_database import UserDatabase\\n    from arrow_database import ArrowDatabase\\n    import flask, sqlite3, requests, jwt\\n    print(\"‚úÖ All imports successful\")\\nexcept ImportError as e:\\n    print(f\"‚ùå Import failed: {e}\")\\n    exit(1)')" && \
    echo "‚úÖ Build verification completed"

# Switch to non-root user
USER appuser

# Enhanced health check
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=5 \
    CMD curl -f http://localhost:5000/api/health && \
        curl -f http://localhost:5000/api/simple-health || exit 1

# Expose port
EXPOSE 5000

# Use enhanced startup script
CMD ["./start-api-robust.sh"]