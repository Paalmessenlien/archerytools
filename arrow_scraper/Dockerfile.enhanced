# Enhanced ArrowTuner API Backend Dockerfile with comprehensive verification
FROM python:3.9-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV FLASK_APP=api.py
ENV FLASK_ENV=production

# Set work directory
WORKDIR /app

# Install system dependencies including verification tools
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        curl \
        wget \
        build-essential \
        sqlite3 \
        jq \
        tree \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p /app/data/processed /app/data/raw /app/logs /app/user_data /app/arrow_data /app/backups

# Make scripts executable
RUN chmod +x /app/api.py \
    /app/build-database.py \
    /app/start-api.sh \
    /app/start-api-robust.sh \
    /app/verify-databases.py \
    /app/comprehensive-migration-runner.sh \
    /app/run_migrations.py

# Create non-root user with specific UID/GID
RUN addgroup --gid 1000 appgroup && \
    adduser --disabled-password --gecos '' --uid 1000 --gid 1000 appuser

# Set up basic directory structure and permissions
RUN echo "üîß Setting up directory structure..." && \
    chown -R appuser:appgroup /app && \
    chmod 755 /app/logs /app/user_data /app/data /app/arrow_data /app/backups && \
    echo "‚úÖ Directory setup completed"

# Verify arrow_data_validator.py was copied
RUN echo "üîç Checking arrow_data_validator.py..." && \
    ls -la /app/arrow_data_validator.py && \
    echo "‚úÖ arrow_data_validator.py found" || { echo "‚ùå arrow_data_validator.py missing"; exit 1; }

# Verify build integrity (imports only - no database files expected at build time)
RUN echo "üîç Final build verification..." && \
    python3 -c "import sys; import os; sys.path.append('/app'); exec('try:\\n    from user_database import UserDatabase\\n    from arrow_database import ArrowDatabase\\n    from arrow_data_validator import ArrowDataValidator\\n    import flask, sqlite3, requests, jwt\\n    print(\"‚úÖ All imports successful including validation module\")\\nexcept ImportError as e:\\n    print(f\"‚ùå Import failed: {e}\")\\n    exit(1)')" && \
    echo "‚úÖ Build verification completed"

# Switch to non-root user
USER appuser

# Enhanced health check with extended startup period for database initialization
HEALTHCHECK --interval=30s --timeout=15s --start-period=120s --retries=5 \
    CMD curl -f http://localhost:5000/api/simple-health || exit 1

# Expose port
EXPOSE 5000

# Use enhanced startup script
CMD ["./start-api-robust.sh"]