{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(cp:*)",
      "Bash(mv:*)",
      "Bash(python:*)",
      "Bash(find:*)",
      "Bash(rm:*)",
      "Bash(mkdir:*)",
      "Bash(# Copy the most complete database files to the unified location\necho \"\"Copying databases to unified location...\"\"\n\n# Copy the most complete arrow database (from arrow_scraper/databases/)\nif [ -f \"\"/home/paal/arrowtuner2/arrow_scraper/databases/arrow_database.db\"\" ]; then\n    cp \"\"/home/paal/arrowtuner2/arrow_scraper/databases/arrow_database.db\"\" \"\"/home/paal/arrowtuner2/databases/arrow_database.db\"\"\n    echo \"\"‚úÖ Copied complete arrow database (206 arrows)\"\"\nelse\n    echo \"\"‚ùå Source arrow database not found\"\"\nfi\n\n# Copy the user database \nif [ -f \"\"/home/paal/arrowtuner2/arrow_scraper/databases/user_data.db\"\" ]; then\n    cp \"\"/home/paal/arrowtuner2/arrow_scraper/databases/user_data.db\"\" \"\"/home/paal/arrowtuner2/databases/user_data.db\"\"\n    echo \"\"‚úÖ Copied user database\"\"\nelif [ -f \"\"/home/paal/arrowtuner2/arrow_scraper/user_data.db\"\" ]; then\n    cp \"\"/home/paal/arrowtuner2/arrow_scraper/user_data.db\"\" \"\"/home/paal/arrowtuner2/databases/user_data.db\"\"\n    echo \"\"‚úÖ Copied user database from fallback location\"\"\nelse\n    echo \"\"‚ùå User database not found\"\"\nfi\n\n# Verify the copied files\necho \"\"\"\"\necho \"\"Unified database status:\"\"\nls -la /home/paal/arrowtuner2/databases/)",
      "Bash(# Verify the unified databases have the correct data\npython -c \"\"\nimport sqlite3\nimport os\n\ndef check_database(db_path, name):\n    if os.path.exists(db_path):\n        conn = sqlite3.connect(db_path)\n        cursor = conn.cursor()\n        \n        if ''arrow'' in name:\n            cursor.execute(''SELECT COUNT(*), MAX(id) FROM arrows'')\n            count, max_id = cursor.fetchone()\n            print(f''{name}: {count} arrows, max ID: {max_id}'')\n            \n            # Check for our test arrows\n            cursor.execute(''SELECT manufacturer, model_name FROM arrows WHERE id IN (2441, 2466)'')\n            test_arrows = cursor.fetchall()\n            for arrow in test_arrows:\n                print(f''  - ID test: {arrow[0]} {arrow[1]}'')\n        \n        elif ''user'' in name:\n            try:\n                cursor.execute(''SELECT COUNT(*) FROM setup_arrows'')\n                count = cursor.fetchone()[0]\n                print(f''{name}: {count} setup arrows'')\n            except:\n                print(f''{name}: User database (may not have setup_arrows table yet)'')\n        \n        conn.close()\n    else:\n        print(f''{name}: NOT FOUND'')\n\nprint(''Unified databases verification:'')\ncheck_database(''/home/paal/arrowtuner2/databases/arrow_database.db'', ''Arrow DB'')\ncheck_database(''/home/paal/arrowtuner2/databases/user_data.db'', ''User DB'')\n\"\")",
      "Bash(sqlite3:*)",
      "Bash(ls:*)",
      "Bash(# First, let''s create a backup of our unified databases just in case\nmkdir -p /home/paal/arrowtuner2/databases-backup\ncp /home/paal/arrowtuner2/databases/* /home/paal/arrowtuner2/databases-backup/\necho \"\"‚úÖ Created backup of unified databases\"\"\n\n# List all database files for review before deletion\necho \"\"\"\"\necho \"\"Current database files to be evaluated:\"\"\nfind /home/paal/arrowtuner2 -name \"\"*.db\"\" -not -path \"\"*/databases-backup/*\"\" -type f | while read file; do\n    if [[ \"\"$file\"\" == */databases/arrow_database.db ]] || [[ \"\"$file\"\" == */databases/user_data.db ]]; then\n        echo \"\"üî¥ KEEP: $file (UNIFIED LOCATION)\"\"\n    else\n        echo \"\"üóëÔ∏è  REMOVE: $file\"\"\n    fi\ndone)",
      "Bash(# Remove duplicate database files (but keep backups in /backups/ directory)\necho \"\"Removing duplicate database files...\"\"\n\n# Remove from arrow_scraper directory (duplicates)\nrm -f /home/paal/arrowtuner2/arrow_scraper/user_data.db\nrm -f /home/paal/arrowtuner2/arrow_scraper/arrow_database_backup.db\nrm -f /home/paal/arrowtuner2/arrow_scraper/arrow_database.db\necho \"\"‚úÖ Removed duplicates from arrow_scraper/\"\"\n\n# Remove pre-restore files (these are temporary)\nrm -f /home/paal/arrowtuner2/arrow_scraper/databases/arrow_database.pre_restore_20250810_175855.db\nrm -f /home/paal/arrowtuner2/arrow_scraper/databases/user_data.pre_restore_20250810_175855.db\necho \"\"‚úÖ Removed temporary pre-restore files\"\"\n\n# Remove docker-data duplicates\nrm -f /home/paal/arrowtuner2/docker-data/arrow_database.db\necho \"\"‚úÖ Removed duplicates from docker-data/\"\"\n\n# Remove docker-volumes duplicates  \nrm -f /home/paal/arrowtuner2/docker-volumes/user-data/user_data.db\nrm -f /home/paal/arrowtuner2/docker-volumes/arrow-data/arrow_database.db\necho \"\"‚úÖ Removed duplicates from docker-volumes/\"\"\n\n# Remove root level duplicate\nrm -f /home/paal/arrowtuner2/arrow_database.db\necho \"\"‚úÖ Removed root level duplicate\"\"\n\necho \"\"\"\"\necho \"\"‚úÖ Database cleanup completed!\"\"\necho \"\"\"\"\necho \"\"KEPT (Unified location):\"\"\nls -la /home/paal/arrowtuner2/databases/\necho \"\"\"\"\necho \"\"KEPT (Backups):\"\"\nls -la /home/paal/arrowtuner2/backups/*/\necho \"\"\"\"\necho \"\"KEPT (Safety backup):\"\"\nls -la /home/paal/arrowtuner2/databases-backup/)",
      "Bash(# List all Docker compose files\necho \"\"Docker Compose files to consolidate:\"\"\nfind /home/paal/arrowtuner2 -maxdepth 1 -name \"\"docker-compose*.yml\"\" | while read file; do\n    if [[ \"\"$file\"\" == */docker-compose.unified.yml ]]; then\n        echo \"\"üî¥ KEEP: $file (UNIFIED)\"\"\n    elif [[ \"\"$file\"\" == */docker-compose.yml ]]; then\n        echo \"\"üü° MAYBE KEEP: $file (main - could be legacy)\"\"\n    else\n        echo \"\"üóëÔ∏è  ARCHIVE: $(basename $file)\"\"\n    fi\ndone)",
      "Bash(# Create a docker-legacy directory for old compose files\nmkdir -p /home/paal/arrowtuner2/docker-legacy\necho \"\"üì¶ Created docker-legacy directory for old compose files\"\"\n\n# Move legacy compose files (but keep docker-compose.yml as it might be referenced)\ncd /home/paal/arrowtuner2\nmv docker-compose.dev.yml docker-legacy/\nmv docker-compose.simple.yml docker-legacy/ \nmv docker-compose.prod.yml docker-legacy/\nmv docker-compose.ssl.yml docker-legacy/\nmv docker-compose.fixed.yml docker-legacy/\nmv docker-compose.fresh.yml docker-legacy/\nmv docker-compose.minimal-ssl.yml docker-legacy/\nmv docker-compose.minimal.yml docker-legacy/\nmv docker-compose.enhanced-ssl.yml docker-legacy/\nmv docker-compose.production-override.yml docker-legacy/\n\necho \"\"‚úÖ Moved legacy Docker compose files to docker-legacy/\"\"\necho \"\"\"\"\necho \"\"Active Docker compose files:\"\"\nls -la docker-compose*.yml\necho \"\"\"\"\necho \"\"Archived Docker compose files:\"\"\nls -la docker-legacy/)",
      "Bash(git add:*)"
    ],
    "deny": []
  }
}