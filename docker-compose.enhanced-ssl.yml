# Enhanced Docker Compose with SSL/HTTPS support and comprehensive verification
# This version includes robust database verification, health checks, and startup validation
# Use with: docker-compose -f docker-compose.enhanced-ssl.yml up

services:
  # Flask API Backend with Enhanced Verification
  api:
    build: 
      context: ./arrow_scraper
      dockerfile: Dockerfile.enhanced
    container_name: arrowtuner-api-enhanced
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key-in-production}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-not-set}
      - NUXT_PUBLIC_GOOGLE_CLIENT_ID=${NUXT_PUBLIC_GOOGLE_CLIENT_ID:-not-set}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-not-set}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI:-https://archerytool.online}
      - DATABASE_VERIFICATION=enabled
      - STARTUP_TIMEOUT=120
    volumes:
      - ./.env:/app/.env:ro  # Mount root .env file as read-only
      - arrowtuner-userdata:/app/user_data  # Persist user database
      - arrowtuner-logs:/app/logs  # Persist logs
    networks:
      - arrowtuner-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/api/health && curl -f http://localhost:5000/api/bow-setups || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s  # Extended start period for verification
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Nuxt 3 Frontend with Build Verification
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.enhanced
      args:
        - NODE_ENV=production
        - BUILD_VERIFICATION=enabled
    container_name: arrowtuner-frontend-enhanced
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NUXT_PUBLIC_API_BASE=https://archerytool.online/api
      - NUXT_PUBLIC_GOOGLE_CLIENT_ID=${NUXT_PUBLIC_GOOGLE_CLIENT_ID:-not-set}
      - BUILD_VERIFICATION=enabled
    depends_on:
      - api
    networks:
      - arrowtuner-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/ || wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx with SSL and Enhanced Health Checks
  nginx:
    image: nginx:alpine
    container_name: arrowtuner-nginx-enhanced
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./deploy/nginx/nginx.http-only.conf:/etc/nginx/nginx.conf:ro
      - arrowtuner-logs:/var/log/nginx  # Persist nginx logs
    depends_on:
      api:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - arrowtuner-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 180s
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Database verification service (runs once then exits)
  db-verifier:
    build: 
      context: ./arrow_scraper
      dockerfile: Dockerfile.enhanced
    container_name: arrowtuner-db-verifier
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key-in-production}
      - NUXT_PUBLIC_GOOGLE_CLIENT_ID=${NUXT_PUBLIC_GOOGLE_CLIENT_ID:-not-set}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-not-set}
    volumes:
      - ./.env:/app/.env:ro
      - arrowtuner-userdata:/app/user_data
      - arrowtuner-logs:/app/logs
    networks:
      - arrowtuner-network
    command: ["python3", "/app/verify-databases.py"]
    restart: "no"  # Run once only
    deploy:
      resources:
        limits:
          memory: 256M

volumes:
  arrowtuner-data:
    driver: local
  arrowtuner-userdata:
    driver: local
  arrowtuner-logs:
    driver: local

networks:
  arrowtuner-network:
    driver: bridge